@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
interface Game {

    @org.checkerframework.dataflow.qual.SideEffectFree
    void newGame();
}

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
class // package-private
GameImpl implements // package-private
Game {

    private  MoveValidator moveValidator;

    @org.checkerframework.dataflow.qual.Impure
    public GameImpl(MoveValidator mValidator) {
        mValidator.setGame(this);
        moveValidator = mValidator;
    }

    @org.checkerframework.dataflow.qual.Impure
    public GameImpl(MonFactory factory) {
        setFactory(factory);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setFactory( GameImpl this,  MonFactory factory) {
        factory.setGame(this);
        moveValidator = factory.createMoveValidator();
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void newGame( GameImpl this) {
        // Implementation of starting a new game
    }
}

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
interface MoveValidator {

    @org.checkerframework.dataflow.qual.Impure
    void setGame( MoveValidator this,  Game game);
}

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
class // package-private
PlayerDependentMoveValidator implements // package-private
MoveValidator {

    private  Game game;

    private  MoveValidator blackMoveValidator = new SimpleMoveValidator();

    @org.checkerframework.dataflow.qual.Impure
    public void setGame( // package-private
    PlayerDependentMoveValidator this,  Game game) {
        this.game = game;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public PlayerDependentMoveValidator() {
    }

    @org.checkerframework.dataflow.qual.Impure
    public PlayerDependentMoveValidator( Game game) {
        this.setGame(game);
        blackMoveValidator.setGame(game);
    }
}

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
class // package-private
SimpleMoveValidator implements // package-private
MoveValidator {

    private  Game game;

    @org.checkerframework.dataflow.qual.Impure
    public void setGame( // package-private
    SimpleMoveValidator this,  Game game) {
        this.game = game;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public SimpleMoveValidator() {
    }

    @org.checkerframework.dataflow.qual.Pure
    public  MoveValidator createMoveValidator() {
        return new PlayerDependentMoveValidator(game);
    }
}

// New interface MonFactory
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
interface MonFactory {

    @org.checkerframework.dataflow.qual.Pure
    public  MoveValidator createMoveValidator( MonFactory this);

    @org.checkerframework.dataflow.qual.Impure
    public void setGame( MonFactory this,  Game game);
}

// New class TestMon that implements MonFactory
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
class TestMon implements MonFactory {

    private  Game game;

    @org.checkerframework.dataflow.qual.Pure
    public  MoveValidator createMoveValidator( TestMon this) {
        return new SimpleMoveValidator();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setGame( TestMon this,  Game game) {
        this.game = game;
    }
}
